import { Children } from 'react';
import { CHANGE_MONITOR, CHANGE_POSITION, CHANGE_SIZE, TOGGLE_VISIBILITY } from './actions';
import { POSITIONS } from './constants';
function position(props) {
  let state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : props.defaultPosition;
  let action = arguments.length > 2 ? arguments[2] : undefined;
  return action.type === CHANGE_POSITION ? POSITIONS[(POSITIONS.indexOf(state) + 1) % POSITIONS.length] : state;
}
function size(props) {
  let state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : props.defaultSize;
  let action = arguments.length > 2 ? arguments[2] : undefined;
  return action.type === CHANGE_SIZE ? action.size : state;
}
function isVisible(props) {
  let state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : props.defaultIsVisible;
  let action = arguments.length > 2 ? arguments[2] : undefined;
  return action.type === TOGGLE_VISIBILITY ? !state : state;
}
function childMonitorStates(props) {
  let state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  let action = arguments.length > 2 ? arguments[2] : undefined;
  return Children.map(props.children, (child, index) => child.type.update(child.props, state[index], action));
}
function childMonitorIndex(props) {
  let state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  let action = arguments.length > 2 ? arguments[2] : undefined;
  switch (action.type) {
    case CHANGE_MONITOR:
      return (state + 1) % Children.count(props.children);
    default:
      return state;
  }
}
export default function reducer(props) {
  let state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let action = arguments.length > 2 ? arguments[2] : undefined;
  if (!state.childMonitorStates) {
    Children.forEach(props.children, (child, index) => {
      if (typeof child.type.update !== 'function') {
        // eslint-disable-next-line no-console
        console.error(`Child of <DockMonitor> with the index ${index} ` + `(${child.type.displayName || child.type.name || child.type}) ` + 'does not appear to be a valid Redux DevTools monitor.');
      }
    });
  }
  return {
    position: position(props, state.position, action),
    isVisible: isVisible(props, state.isVisible, action),
    size: size(props, state.size, action),
    childMonitorIndex: childMonitorIndex(props, state.childMonitorIndex, action),
    childMonitorStates: childMonitorStates(props, state.childMonitorStates, action)
  };
}