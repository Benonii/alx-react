import React, { PureComponent } from 'react';
import { JSONTree } from 'react-json-tree';
import LogMonitorEntryAction from './LogMonitorEntryAction';
const styles = {
  entry: {
    display: 'block',
    WebkitUserSelect: 'none'
  },
  root: {
    marginLeft: 0
  }
};
const getDeepItem = (data, path) => path.reduce((obj, key) => obj && obj[key], data);
const dataIsEqual = (data, previousData, keyPath) => {
  const path = [...keyPath].reverse().slice(1);
  return getDeepItem(data, path) === getDeepItem(previousData, path);
};
export default class LogMonitorEntry extends PureComponent {
  printState(state, error) {
    let errorText = error;
    if (!errorText) {
      try {
        const data = this.props.select(state);
        let theme;
        if (this.props.markStateDiff) {
          const previousData = typeof this.props.previousState !== 'undefined' ? this.props.select(this.props.previousState) : undefined;
          const getValueStyle = (_ref, nodeType, keyPath) => {
            let {
              style
            } = _ref;
            return {
              style: {
                ...style,
                backgroundColor: dataIsEqual(data, previousData, keyPath) ? 'transparent' : this.props.theme.base01
              }
            };
          };
          const getNestedNodeStyle = (_ref2, keyPath) => {
            let {
              style
            } = _ref2;
            return {
              style: {
                ...style,
                ...(keyPath.length > 1 ? {} : styles.root)
              }
            };
          };
          theme = {
            extend: this.props.theme,
            value: getValueStyle,
            nestedNode: getNestedNodeStyle
          };
        } else {
          theme = this.props.theme;
        }
        return /*#__PURE__*/React.createElement(JSONTree, {
          theme: theme,
          data: data,
          invertTheme: false,
          keyPath: ['state'],
          shouldExpandNodeInitially: this.shouldExpandNodeInitially
        });
      } catch (err) {
        errorText = 'Error selecting state.';
      }
    }
    return /*#__PURE__*/React.createElement("div", {
      style: {
        color: this.props.theme.base08,
        paddingTop: 20,
        paddingLeft: 30,
        paddingRight: 30,
        paddingBottom: 35
      }
    }, errorText);
  }
  handleActionClick = e => {
    const {
      actionId,
      onActionClick,
      onActionShiftClick
    } = this.props;
    if (actionId > 0) {
      if (e.shiftKey) {
        onActionShiftClick(actionId);
      } else {
        onActionClick(actionId);
      }
    }
  };
  shouldExpandNodeInitially = (keyPath, data, level) => {
    return this.props.expandStateRoot && level === 0;
  };
  render() {
    const {
      actionId,
      error,
      action,
      state,
      collapsed,
      selected,
      inFuture
    } = this.props;
    const styleEntry = {
      opacity: collapsed ? 0.5 : 1,
      cursor: actionId > 0 ? 'pointer' : 'default'
    };
    return /*#__PURE__*/React.createElement("div", {
      style: {
        opacity: selected ? 0.4 : inFuture ? 0.6 : 1,
        // eslint-disable-line no-nested-ternary
        textDecoration: collapsed ? 'line-through' : 'none',
        color: this.props.theme.base06
      }
    }, /*#__PURE__*/React.createElement(LogMonitorEntryAction, {
      theme: this.props.theme,
      collapsed: collapsed,
      action: action,
      expandActionRoot: this.props.expandActionRoot,
      onClick: this.handleActionClick,
      style: {
        ...styles.entry,
        ...styleEntry
      }
    }), !collapsed && /*#__PURE__*/React.createElement("div", {
      style: {
        paddingLeft: 16
      }
    }, this.printState(state, error)));
  }
}