"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _core = require("@redux-devtools/core");
var _LogMonitorButton = _interopRequireDefault(require("./LogMonitorButton"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const {
  reset,
  rollback,
  commit,
  sweep
} = _core.ActionCreators;
const style = {
  textAlign: 'center',
  borderBottomWidth: 1,
  borderBottomStyle: 'solid',
  borderColor: 'transparent',
  zIndex: 1,
  display: 'flex',
  flexDirection: 'row'
};
class LogMonitorButtonBar extends _react.PureComponent {
  handleRollback = () => {
    this.props.dispatch(rollback());
  };
  handleSweep = () => {
    this.props.dispatch(sweep());
  };
  handleCommit = () => {
    this.props.dispatch(commit());
  };
  handleReset = () => {
    this.props.dispatch(reset());
  };
  render() {
    const {
      theme,
      hasStates,
      hasSkippedActions
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      style: {
        ...style,
        borderColor: theme.base02
      }
    }, /*#__PURE__*/_react.default.createElement(_LogMonitorButton.default, {
      theme: theme,
      onClick: this.handleReset,
      enabled: true
    }, "Reset"), /*#__PURE__*/_react.default.createElement(_LogMonitorButton.default, {
      theme: theme,
      onClick: this.handleRollback,
      enabled: hasStates
    }, "Revert"), /*#__PURE__*/_react.default.createElement(_LogMonitorButton.default, {
      theme: theme,
      onClick: this.handleSweep,
      enabled: hasSkippedActions
    }, "Sweep"), /*#__PURE__*/_react.default.createElement(_LogMonitorButton.default, {
      theme: theme,
      onClick: this.handleCommit,
      enabled: hasStates
    }, "Commit"));
  }
}
exports.default = LogMonitorButtonBar;