"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactBase16Styling = require("react-base16-styling");
var _core = require("@redux-devtools/core");
var _lodash = _interopRequireDefault(require("lodash.debounce"));
var _actions = require("./actions");
var _reducers = _interopRequireDefault(require("./reducers"));
var _LogMonitorButtonBar = _interopRequireDefault(require("./LogMonitorButtonBar"));
var _LogMonitorEntryList = _interopRequireDefault(require("./LogMonitorEntryList"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const {
  toggleAction,
  setActionsActive
} = _core.ActionCreators;
const styles = {
  container: {
    fontFamily: 'monaco, Consolas, Lucida Console, monospace',
    position: 'relative',
    overflowY: 'hidden',
    width: '100%',
    height: '100%',
    minWidth: 300,
    direction: 'ltr'
  },
  elements: {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    overflowX: 'hidden',
    overflowY: 'auto'
  }
};
class LogMonitor extends _react.PureComponent {
  static update = _reducers.default;
  static defaultProps = {
    select: state => state,
    theme: 'nicinabox',
    preserveScrollTop: true,
    expandActionRoot: true,
    expandStateRoot: true,
    markStateDiff: false
  };
  updateScrollTop = (0, _lodash.default)(() => {
    const node = this.node;
    this.props.dispatch((0, _actions.updateScrollTop)(node ? node.scrollTop : 0));
  }, 500);
  scroll() {
    const node = this.node;
    if (!node) {
      return;
    }
    if (this.scrollDown) {
      const {
        offsetHeight,
        scrollHeight
      } = node;
      node.scrollTop = scrollHeight - offsetHeight;
      this.scrollDown = false;
    }
  }
  componentDidMount() {
    const node = this.node;
    if (!node || !this.props.monitorState) {
      return;
    }
    if (this.props.preserveScrollTop) {
      node.scrollTop = this.props.monitorState.initialScrollTop;
      node.addEventListener('scroll', this.updateScrollTop);
    } else {
      this.scrollDown = true;
      this.scroll();
    }
  }
  componentWillUnmount() {
    const node = this.node;
    if (node && this.props.preserveScrollTop) {
      node.removeEventListener('scroll', this.updateScrollTop);
    }
  }
  UNSAFE_componentWillReceiveProps(nextProps) {
    const node = this.node;
    if (!node) {
      this.scrollDown = true;
    } else if (this.props.stagedActionIds.length < nextProps.stagedActionIds.length) {
      const {
        scrollTop,
        offsetHeight,
        scrollHeight
      } = node;
      this.scrollDown = Math.abs(scrollHeight - (scrollTop + offsetHeight)) < 20;
    } else {
      this.scrollDown = false;
    }
  }
  componentDidUpdate() {
    this.scroll();
  }
  handleToggleAction = id => {
    this.props.dispatch(toggleAction(id));
  };
  handleToggleConsecutiveAction = id => {
    const {
      monitorState,
      actionsById
    } = this.props;
    const {
      consecutiveToggleStartId
    } = monitorState;
    if (consecutiveToggleStartId && actionsById[consecutiveToggleStartId]) {
      const {
        skippedActionIds
      } = this.props;
      const start = Math.min(consecutiveToggleStartId, id);
      const end = Math.max(consecutiveToggleStartId, id);
      const active = skippedActionIds.indexOf(consecutiveToggleStartId) > -1;
      this.props.dispatch(setActionsActive(start, end + 1, active));
      this.props.dispatch((0, _actions.startConsecutiveToggle)(null));
    } else if (id > 0) {
      this.props.dispatch((0, _actions.startConsecutiveToggle)(id));
    }
  };
  getTheme() {
    const {
      theme
    } = this.props;
    if (typeof theme !== 'string') {
      return theme;
    }
    if (typeof _reactBase16Styling.base16Themes[theme] !== 'undefined') {
      return _reactBase16Styling.base16Themes[theme];
    }

    // eslint-disable-next-line no-console
    console.warn('DevTools theme ' + theme + ' not found, defaulting to nicinabox');
    return _reactBase16Styling.base16Themes.nicinabox;
  }
  getRef = node => {
    this.node = node;
  };
  render() {
    const theme = this.getTheme();
    const {
      consecutiveToggleStartId
    } = this.props.monitorState;
    const {
      dispatch,
      actionsById,
      skippedActionIds,
      stagedActionIds,
      computedStates,
      currentStateIndex,
      select,
      expandActionRoot,
      expandStateRoot,
      markStateDiff
    } = this.props;
    const entryListProps = {
      theme,
      actionsById,
      skippedActionIds,
      stagedActionIds,
      computedStates,
      currentStateIndex,
      consecutiveToggleStartId,
      select,
      expandActionRoot,
      expandStateRoot,
      markStateDiff,
      onActionClick: this.handleToggleAction,
      onActionShiftClick: this.handleToggleConsecutiveAction
    };
    return /*#__PURE__*/_react.default.createElement("div", {
      style: {
        ...styles.container,
        backgroundColor: theme.base00
      }
    }, !this.props.hideMainButtons && /*#__PURE__*/_react.default.createElement(_LogMonitorButtonBar.default, {
      theme: theme,
      dispatch: dispatch,
      hasStates: computedStates.length > 1,
      hasSkippedActions: skippedActionIds.length > 0
    }), /*#__PURE__*/_react.default.createElement("div", {
      style: this.props.hideMainButtons ? styles.elements : {
        ...styles.elements,
        top: 30
      },
      ref: this.getRef
    }, /*#__PURE__*/_react.default.createElement(_LogMonitorEntryList.default, entryListProps)));
  }
}
var _default = exports.default = LogMonitor;